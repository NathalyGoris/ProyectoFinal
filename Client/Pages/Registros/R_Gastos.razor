@page "/registro-gasto"
@page "/registro-gasto/{GastoId:int}"
@inject HttpClient httpClient
@inject NotificationService notificationServices


<h3 class="text-primary">Registro de Gasto</h3>

<EditForm Model="nuevaTransaccion" OnValidSubmit="RegistrarGasto">
    <DataAnnotationsValidator />
    <div class="col-md-6">
        <label>ID</label>
            <div class="input-group">
                <InputNumber @bind-Value="gastos.TransaccionId" class="form-control" />
                <button type="button" class="btn btn-outline-primary oi oi-magnifying-glass" @onclick="Buscar"></button>
            </div>
    </div>
    <div class="form-group">
        <label for="Fecha" class="text-muted">Fecha:</label>
        <InputDate id="Fecha" @bind-Value="nuevaTransaccion.Fecha" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Monto" class="text-muted">Monto:</label>
        <InputNumber id="Monto" @bind-Value="nuevaTransaccion.Monto" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Categoria" class="text-muted">Categoría:</label>
        <InputSelect id="Categoria" @bind-Value="nuevaTransaccion.Categoria" class="form-control">
            @foreach (var categoria in Categoriagasto)
            {
                <option value="@categoria">@categoria.Descripcion</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="Descripcion" class="text-muted">Descripción:</label>
        <InputText id="Descripcion" @bind-Value="nuevaTransaccion.Descripcion" class="form-control" />
    </div>    
    <div class="card-footer d-flex justify-content-center">
        <div class="btn-group">
            <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
            <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document" /></button>
            <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
        </div>
    </div>
</EditForm>

@code {
    // P
    [Parameter]

    public int GastoId { get; set; }

    public Gastos gastos { get; set; } = new Gastos(); 
    private Transacciones nuevaTransaccion = new Transacciones();
    public string Mensaje { get; set; } = string.Empty;
    private List<Usuarios> usuarios = new List<Usuarios>(); 
    private List<Gastos> Categoriagasto = new List<Gastos>(); 

    // Método para registrar el gasto
    private async Task RegistrarGasto()
    {
    if (!Validar())
    {
        // Si los datos no son válidos, muestra una notificación de error
        notificationServices.ShowNotification(
            titulo: "Error",
            mensaje: "Por favor, completa todos los campos requeridos.",
            NotificationSeverity.Error
        );
        return;
    }

    try
    {
        // Envía la nuevaTransaccion al servidor para guardarla como un gasto
        HttpResponseMessage response;
        if (nuevaTransaccion.TransaccionId == 0)
        {
            // Si es una nueva transacción, utiliza POST para agregarla
            response = await httpClient.PostAsJsonAsync("api/Gastos", nuevaTransaccion);
        }
        else
        {
            // Si ya existe, utiliza PUT para actualizarla
            response = await httpClient.PutAsJsonAsync($"api/Gastos/{nuevaTransaccion.TransaccionId}", nuevaTransaccion);
        }

        // Verifica si la solicitud fue exitosa
        if (response.IsSuccessStatusCode)
        {
            // La transacción se guardó correctamente
            notificationServices.ShowNotification(
                titulo: "Éxito",
                mensaje: "Registro guardado exitosamente.",
                NotificationSeverity.Success
            );
            // Resetea el formulario
            nuevaTransaccion = new Transacciones();
        }
        else
        {
            // Si la solicitud no fue exitosa, muestra una notificación de error
            notificationServices.ShowNotification(
                titulo: "Error",
                mensaje: "El registro no se pudo guardar. Por favor, inténtalo nuevamente.",
                NotificationSeverity.Error
            );
        }
    }
    catch (Exception ex)
    {
        // Si ocurre una excepción, muestra una notificación de error
        notificationServices.ShowNotification(
            titulo: "Error",
            mensaje: $"Ha ocurrido un error: {ex.Message}",
            NotificationSeverity.Error
        );
    }
}


    protected override async Task OnInitializedAsync()
    {
        if(GastoId>0)
        {
            this.gastos.TransaccionId = GastoId;
            await Buscar();
        }

        Categoriagasto = new List<Gastos>
        {
            new Gastos { TransaccionId = 1, Descripcion = "Alimentos" },
            new Gastos { TransaccionId = 2, Descripcion = "Transporte" },
            new Gastos { TransaccionId = 3, Descripcion = "Entretenimiento" },
            new Gastos { TransaccionId = 4, Descripcion = "Facturas" },
            new Gastos { TransaccionId = 4, Descripcion = "Salud" },
            new Gastos { TransaccionId = 4, Descripcion = "Vacaciones" },
            new Gastos { TransaccionId = 4, Descripcion = "General" },
            new Gastos { TransaccionId = 4, Descripcion = "Regalos" },
            new Gastos { TransaccionId = 4, Descripcion = "Ropa" },
            new Gastos { TransaccionId = 4, Descripcion = "Cuidado personal" },
        };
    }

    
    public async Task Buscar()
    {
        var buscar = await httpClient.GetFromJsonAsync<Gastos>($"api/Gastos/{gastos.TransaccionId}");
        {
            if (buscar != null)
            {
                this.gastos = buscar;
                StateHasChanged();
            }
            else
            {
                    notificationServices.ShowNotification(
                    titulo: "Error de búsqueda",
                    mensaje: "Registro no encontrado",
                    NotificationSeverity.Error
                );
            }
        }
    }

    public bool Validar()
    {
        return !string.IsNullOrEmpty(gastos.Descripcion)
        && gastos.TransaccionId >= 0;
    }

    public async void Guardar()
    {
        using var error = await httpClient.PostAsJsonAsync<Gastos>("api/Gastos", gastos);
        if (!error.IsSuccessStatusCode)
        {   
                notificationServices.ShowNotification(
                titulo: "error",
                mensaje: "El Registro no se guardo",
                NotificationSeverity.Error
            );
            return;
        }
        var exito = await error.Content.ReadFromJsonAsync<Gastos>();
        if (exito is not null)
        {
            this.gastos = exito;
            StateHasChanged();
                notificationServices.ShowNotification(
                titulo: "Exito",
                mensaje: "Registro guardado",
                NotificationSeverity.Success
            );
        }
    }
    public void Nuevo()
    {
        this.gastos = new Gastos();
        Mensaje = string.Empty;
    }
    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Gastos/{gastos.TransaccionId}");
        if (!response.IsSuccessStatusCode)
        {
            Mensaje = response.ReasonPhrase ?? "error";
            return;
        }
        else
            Nuevo();
    }
}
